// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// crksum
int crksum(int rks, int I, int J, int sumrks, int minrks);
RcppExport SEXP clusrank_crksum(SEXP rksSEXP, SEXP ISEXP, SEXP JSEXP, SEXP sumrksSEXP, SEXP minrksSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type rks(rksSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type sumrks(sumrksSEXP);
    Rcpp::traits::input_parameter< int >::type minrks(minrksSEXP);
    __result = Rcpp::wrap(crksum(rks, I, J, sumrks, minrks));
    return __result;
END_RCPP
}
// pcrksum
double pcrksum(int rks, int I, IntegerVector Score);
RcppExport SEXP clusrank_pcrksum(SEXP rksSEXP, SEXP ISEXP, SEXP ScoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type rks(rksSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Score(ScoreSEXP);
    __result = Rcpp::wrap(pcrksum(rks, I, Score));
    return __result;
END_RCPP
}
// cumcrksum
IntegerMatrix cumcrksum(int rks, int I, IntegerVector Score);
RcppExport SEXP clusrank_cumcrksum(SEXP rksSEXP, SEXP ISEXP, SEXP ScoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type rks(rksSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Score(ScoreSEXP);
    __result = Rcpp::wrap(cumcrksum(rks, I, Score));
    return __result;
END_RCPP
}
// crksum_str
int crksum_str(int k, IntegerMatrix x, IntegerMatrix xc, IntegerVector max);
RcppExport SEXP clusrank_crksum_str(SEXP kSEXP, SEXP xSEXP, SEXP xcSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type xc(xcSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max(maxSEXP);
    __result = Rcpp::wrap(crksum_str(k, x, xc, max));
    return __result;
END_RCPP
}
// pcrksum_str
double pcrksum_str(int k, IntegerMatrix x, IntegerMatrix xc, IntegerVector xn, IntegerVector n, IntegerVector max);
RcppExport SEXP clusrank_pcrksum_str(SEXP kSEXP, SEXP xSEXP, SEXP xcSEXP, SEXP xnSEXP, SEXP nSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type xc(xcSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type xn(xnSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max(maxSEXP);
    __result = Rcpp::wrap(pcrksum_str(k, x, xc, xn, n, max));
    return __result;
END_RCPP
}
// csrkg
int csrkg(int srk, IntegerVector Score);
RcppExport SEXP clusrank_csrkg(SEXP srkSEXP, SEXP ScoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type srk(srkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Score(ScoreSEXP);
    __result = Rcpp::wrap(csrkg(srk, Score));
    return __result;
END_RCPP
}
// psrkg
double psrkg(int srk, IntegerVector Score);
RcppExport SEXP clusrank_psrkg(SEXP srkSEXP, SEXP ScoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type srk(srkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Score(ScoreSEXP);
    __result = Rcpp::wrap(psrkg(srk, Score));
    return __result;
END_RCPP
}
// Fprop
NumericVector Fprop(NumericVector x, NumericVector clus, IntegerVector nvec, int m, int n);
RcppExport SEXP clusrank_Fprop(SEXP xSEXP, SEXP clusSEXP, SEXP nvecSEXP, SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type clus(clusSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(Fprop(x, clus, nvec, m, n));
    return __result;
END_RCPP
}
// Fi
double Fi(double X, int I, NumericVector x, IntegerVector clus, IntegerVector nvec, int N);
RcppExport SEXP clusrank_Fi(SEXP XSEXP, SEXP ISEXP, SEXP xSEXP, SEXP clusSEXP, SEXP nvecSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type clus(clusSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    __result = Rcpp::wrap(Fi(X, I, x, clus, nvec, N));
    return __result;
END_RCPP
}
// Ftot
double Ftot(double X, NumericVector x, IntegerVector clus, IntegerVector nvec, int N, int M);
RcppExport SEXP clusrank_Ftot(SEXP XSEXP, SEXP xSEXP, SEXP clusSEXP, SEXP nvecSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type clus(clusSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    __result = Rcpp::wrap(Ftot(X, x, clus, nvec, N, M));
    return __result;
END_RCPP
}
// Ftot_vec
NumericVector Ftot_vec(NumericVector x, IntegerVector clus, IntegerVector nvec, int N, int M);
RcppExport SEXP clusrank_Ftot_vec(SEXP xSEXP, SEXP clusSEXP, SEXP nvecSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type clus(clusSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    __result = Rcpp::wrap(Ftot_vec(x, clus, nvec, N, M));
    return __result;
END_RCPP
}
// Fi_vec
NumericVector Fi_vec(NumericVector x, IntegerVector clus, IntegerVector nvec, int N, int M);
RcppExport SEXP clusrank_Fi_vec(SEXP xSEXP, SEXP clusSEXP, SEXP nvecSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type clus(clusSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    __result = Rcpp::wrap(Fi_vec(x, clus, nvec, N, M));
    return __result;
END_RCPP
}
// Fcom
double Fcom(double X, NumericVector x, IntegerVector clus, IntegerVector nvec, int N, int M);
RcppExport SEXP clusrank_Fcom(SEXP XSEXP, SEXP xSEXP, SEXP clusSEXP, SEXP nvecSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type clus(clusSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    __result = Rcpp::wrap(Fcom(X, x, clus, nvec, N, M));
    return __result;
END_RCPP
}
// Fcom_vec
NumericVector Fcom_vec(NumericVector x, IntegerVector clus, IntegerVector nvec, int N, int M);
RcppExport SEXP clusrank_Fcom_vec(SEXP xSEXP, SEXP clusSEXP, SEXP nvecSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type clus(clusSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    __result = Rcpp::wrap(Fcom_vec(x, clus, nvec, N, M));
    return __result;
END_RCPP
}
