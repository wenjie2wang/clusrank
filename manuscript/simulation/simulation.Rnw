\documentclass[nojss]{jss}

\usepackage{amsmath, bm, amssymb}
% \usepackage{graphicx}
\usepackage{natbib}
\usepackage{booktabs}

% For in-house revision purpose only
\usepackage{color}
\newcommand{\blue}[1]{\textcolor{blue}{(#1)}}
\newcommand{\red}[1]{\textcolor{red}{(#1)}}
\begin{document}
<<knitr, echo=FALSE>>=
library(knitr)
opts_chunk$set(cache=TRUE, autodep=TRUE)
@ 


<<corstr>>=
ex  <- function(dim, rho) {
    diag(1 - rho, dim) + matrix(rho, dim, dim) 
}
ar1 <- function(dim, rho) {
    rho ^ outer(1:dim, 1:dim, function(x, y) abs(x - y))
}    
@


<<datgen, echo=TRUE>>= 
library(mvtnorm)
datgen.sum <- function(nclus, maxclsize, delta = 0., rho = c(0.1, 0.1), 
                       corr = ex, misrate = 0., clusgrp = TRUE) {
    nn <- nclus * maxclsize
    Sigma1 <- corr(maxclsize, rho[1])
    Sigma2 <- corr(maxclsize, rho[2])
    y1 <- c(t(rmvnorm(nclus, sigma = Sigma1))) 
    y2 <- c(t(rmvnorm(nclus, sigma = Sigma2)))
    group <- rep(c(0, 1), each = nn)
    if (!clusgrp) group  <- sample(group, nn, FALSE)
    cid <- rep(1:(2 * nclus), each = maxclsize)
    x <- exp(c(y1, y2)) + delta * group 
    dat <- data.frame(x = x, grp = group, cid = cid) 
    drop <-  sort(sample(1:(2 * nn), size = misrate * (2 * nn), FALSE))
    if (misrate == 0.) dat else dat[-drop, ]      
}
@

<<datagen_sr, echo = TRUE>>=
datgen.sgn <- function(nclus, maxclsize, delta = 0., rho = 0.1, 
                       corr = ex, misrate = 0.) {
    nn <- nclus * maxclsize
    Sigma <- corr(maxclsize, rho)
    z <- delta + c(t(rmvnorm(nclus, sigma = Sigma)))
    x <- sign(z) * exp(abs(z))
    cid <- rep(1:nclus, each = maxclsize)
    dat <- data.frame(x = x, cid = cid)
    drop <- sort(sample(1:nn, size = (1 - misrate) * nn, FALSE))
    if (misrate == 0.) dat else dat[-drop,]
}
@ 


<<simpower>>=
library(clusrank)
simpower <- function(nrep, level, paired, nclus, maxclsize, 
                     delta, rho, corr, misrate, ...) {
    do1rep <- function() {
        datgen <- if (paired) datgen.sgn else datgen.sum
        formula <- if (paired) x ~ cluster(cid) 
                   else x ~ cluster(cid) + grp
        dat <- datgen(nclus, maxclsize, delta, rho, corr, misrate, ...)
        p.rgl <- clusWilcox.test(formula, paired = paired, 
                                 data = dat, method = "rgl")$p.value
        p.ds  <- clusWilcox.test(formula, paired = paired, 
                                 data = dat, method = "ds" )$p.value
        c(rgl = p.rgl, ds = p.ds)
    }
    sim <- t(replicate(nrep, do1rep()))
    apply(sim, 2, function(x) mean(x < level))
}
@





<<sr-b-ar1-rho11-csize2, echo = FALSE, eval = TRUE>>=
sr.b.a.11.2 <- rep(0, 6) 
sr.b.a.11.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.1, ar1, 0)
sr.b.a.11.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.1, ar1, 0)
sr.b.a.11.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.1, ar1, 0)
@ 

<<sr-b-ar1-rho55-csize2, echo = FALSE, eval = TRUE>>=
sr.b.a.55.2 <- rep(0, 6) 
sr.b.a.55.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.5, ar1, 0)
sr.b.a.55.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.5, ar1, 0)
sr.b.a.55.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.5, ar1, 0)
@ 

<<sr-b-ar1-rho99-csize2, echo = FALSE, eval = TRUE>>=
sr.b.a.99.2 <- rep(0, 6) 
sr.b.a.99.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.9, ar1, 0)
sr.b.a.99.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.9, ar1, 0)
sr.b.a.99.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.9, ar1, 0)
@ 




<<sr-b-ar1-rho11-csize10, echo = FALSE, eval = TRUE>>=
sr.b.a.11.10 <- rep(0, 6) 
sr.b.a.11.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.1, ar1, 0)
sr.b.a.11.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.1, ar1, 0)
sr.b.a.11.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.1, ar1, 0)
@ 

<<sr-b-ar1-rho55-csize10, echo = FALSE, eval = TRUE>>=
sr.b.a.55.10 <- rep(0, 6) 
sr.b.a.55.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.5, ar1, 0)
sr.b.a.55.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.5, ar1, 0)
sr.b.a.55.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.5, ar1, 0)
@ 

<<sr-b-ar1-rho99-csize10, echo = FALSE, eval = TRUE>>=
sr.b.a.99.10 <- rep(0, 6) 
sr.b.a.99.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.9, ar1, 0)
sr.b.a.99.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.9, ar1, 0)
sr.b.a.99.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.9, ar1, 0)
@ 



<<sr-ub-ar1-rho11-csize2, echo = FALSE, eval = TRUE>>=
sr.ub.a.11.2 <- rep(0, 6) 
sr.ub.a.11.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.1, ar1, 0.5)
sr.ub.a.11.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.1, ar1, 0.5)
sr.ub.a.11.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.1, ar1, 0.5)
@ 

<<sr-ub-ar1-rho55-csize2, echo = FALSE, eval = TRUE>>=
sr.ub.a.55.2 <- rep(0, 6) 
sr.ub.a.55.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.5, ar1, 0.5)
sr.ub.a.55.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.5, ar1, 0.5)
sr.ub.a.55.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.5, ar1, 0.5)
@ 

<<sr-ub-ar1-rho99-csize2, echo = FALSE, eval = TRUE>>=
sr.ub.a.99.2 <- rep(0, 6) 
sr.ub.a.99.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.9, ar1, 0.5)
sr.ub.a.99.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.9, ar1, 0.5)
sr.ub.a.99.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.9, ar1, 0.5)
@ 




<<sr-ub-ar1-rho11-csize10, echo = FALSE, eval = TRUE>>=
sr.ub.a.11.10 <- rep(0, 6) 
sr.ub.a.11.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.1, ar1, 0.5)
sr.ub.a.11.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.1, ar1, 0.5)
sr.ub.a.11.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.1, ar1, 0.5)
@ 

<<sr-ub-ar1-rho55-csize10, echo = FALSE, eval = TRUE>>=
sr.ub.a.55.10 <- rep(0, 6) 
sr.ub.a.55.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.5, ar1, 0.5)
sr.ub.a.55.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.5, ar1, 0.5)
sr.ub.a.55.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.5, ar1, 0.5)
@ 

<<sr-ub-ar1-rho99-csize10, echo = FALSE, eval = TRUE>>=
sr.ub.a.99.10 <- rep(0, 6) 
sr.ub.a.99.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.9, ar1, 0.5)
sr.ub.a.99.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.9, ar1, 0.5)
sr.ub.a.99.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.9, ar1, 0.5)
@ 







<<sr-b-ex-rho11-csize2, echo = FALSE, eval = TRUE>>=
sr.b.x.11.2 <- rep(0, 6) 
sr.b.x.11.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.1, ex, 0)
sr.b.x.11.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.1, ex, 0)
sr.b.x.11.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.1, ex, 0)
@ 

<<sr-b-ex-rho55-csize2, echo = FALSE, eval = TRUE>>=
sr.b.x.55.2 <- rep(0, 6) 
sr.b.x.55.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.5, ex, 0)
sr.b.x.55.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.5, ex, 0)
sr.b.x.55.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.5, ex, 0)
@ 

<<sr-b-ex-rho99-csize2, echo = FALSE, eval = TRUE>>=
sr.b.x.99.2 <- rep(0, 6) 
sr.b.x.99.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.9, ex, 0)
sr.b.x.99.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.9, ex, 0)
sr.b.x.99.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.9, ex, 0)
@ 




<<sr-b-ex-rho11-csize10, echo = FALSE, eval = TRUE>>=
sr.b.x.11.10 <- rep(0, 6) 
sr.b.x.11.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.1, ex, 0)
sr.b.x.11.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.1, ex, 0)
sr.b.x.11.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.1, ex, 0)
@ 

<<sr-b-ex-rho55-csize10, echo = FALSE, eval = TRUE>>=
sr.b.x.55.10 <- rep(0, 6) 
sr.b.x.55.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.5, ex, 0)
sr.b.x.55.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.5, ex, 0)
sr.b.x.55.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.5, ex, 0)
@ 

<<sr-b-ex-rho99-csize10, echo = FALSE, eval = TRUE>>=
sr.b.x.99.10 <- rep(0, 6) 
sr.b.x.99.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.9, ex, 0)
sr.b.x.99.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.9, ex, 0)
sr.b.x.99.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.9, ex, 0)
@ 



<<sr-ub-ex-rho11-csize2, echo = FALSE, eval = TRUE>>=
sr.ub.x.11.2 <- rep(0, 6) 
sr.ub.x.11.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.1, ex, 0.5)
sr.ub.x.11.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.1, ex, 0.5)
sr.ub.x.11.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.1, ex, 0.5)
@ 

<<sr-ub-ex-rho55-csize2, echo = FALSE, eval = TRUE>>=
sr.ub.x.55.2 <- rep(0, 6) 
sr.ub.x.55.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.5, ex, 0.5)
sr.ub.x.55.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.5, ex, 0.5)
sr.ub.x.55.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.5, ex, 0.5)
@ 

<<sr-ub-ex-rho99-csize2, echo = FALSE, eval = TRUE>>=
sr.ub.x.99.2 <- rep(0, 6) 
sr.ub.x.99.2[1:2] <- simpower(1000, 0.05, TRUE, 20, 2, 0, 0.9, ex, 0.5)
sr.ub.x.99.2[3:4] <- simpower(1000, 0.05, TRUE, 20, 2, 0.3, 0.9, ex, 0.5)
sr.ub.x.99.2[5:6] <- simpower(1000, 0.05, TRUE, 20, 2, 0.6, 0.9, ex, 0.5)
@ 




<<sr-ub-ex-rho11-csize10, echo = FALSE, eval = TRUE>>=
sr.ub.x.11.10 <- rep(0, 6) 
sr.ub.x.11.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.1, ex, 0.5)
sr.ub.x.11.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.1, ex, 0.5)
sr.ub.x.11.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.1, ex, 0.5)
@ 

<<sr-ub-ex-rho55-csize10, echo = FALSE, eval = TRUE>>=
sr.ub.x.55.10 <- rep(0, 6) 
sr.ub.x.55.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.5, ex, 0.5)
sr.ub.x.55.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.5, ex, 0.5)
sr.ub.x.55.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.5, ex, 0.5)
@ 

<<sr-ub-ex-rho99-csize10, echo = FALSE, eval = TRUE>>=
sr.ub.x.99.10 <- rep(0, 6) 
sr.ub.x.99.10[1:2] <- simpower(1000, 0.05, TRUE, 20, 10, 0, 0.9, ex, 0.5)
sr.ub.x.99.10[3:4] <- simpower(1000, 0.05, TRUE, 20, 10, 0.3, 0.9, ex, 0.5)
sr.ub.x.99.10[5:6] <- simpower(1000, 0.05, TRUE, 20, 10, 0.6, 0.9, ex, 0.5)
@ 






<<sr-tab, echo = FALSE, eval = TRUE, results = 'asis'>>=

sum.tab.sr.a <- rbind(sr.b.a.11.2, sr.b.a.55.2, sr.b.a.99.2,
                      sr.b.a.11.10, sr.b.a.55.10, sr.b.a.99.10,
                      sr.ub.a.11.2, sr.ub.a.55.2, sr.ub.a.99.2,
                      sr.ub.a.11.10, sr.ub.a.55.10, sr.ub.a.99.10)


sum.tab.sr.x <- rbind(sr.b.x.11.2, sr.b.x.55.2, sr.b.x.99.2,
                      sr.b.x.11.10, sr.b.x.55.10, sr.b.x.99.10,
                      sr.ub.x.11.2, sr.ub.x.55.2, sr.ub.x.99.2,
                      sr.ub.x.11.10, sr.ub.x.55.10, sr.ub.x.99.10)
## sum.tab <- rbind(srb.x, srub.x, srb, sru)
## library(xtable)

sum.tab.sr.a <- sum.tab.sr.a * 100
sum.tab.sr.x <- sum.tab.sr.x * 100
sum.tab.sr.a <- xtable(sum.tab.sr.a, digits = 1)
sum.tab.sr.x <- xtable(sum.tab.sr.x, digits = 1)


print(sum.tab.sr.x)
print(sum.tab.sr.a)


## sum.tab <- rbind(srb, srub, srub10)
## rownames(sum.tab) <- c("bal, $\\rho = 0.1$", 
##                        "bal, $\\rho = 0.1, 0.9$",
##                        "bal, $\\rho = 0.9$",
##                        "unbal, $\\rho = 0.1$",
##                        "unbal, $\\rho = 0.1, 0.9$",
##                        "unbal, $\\rho = 0.9$" ,
##                        "unbal, maxsize = 1b0, $\\rho = 0.1$",
##                        "unbal, maxsize = 10, $\\rho = 0.1, 0.9$",
##                        "unbal, maxsize = 10, $\\rho = 0.9$")
## addtorow <- list()
## addtorow$pos <- list( 0, 0)
## addtorow$command <-
##     c(" & \\multicolumn{2}{c}{size} & \\multicolumn{2}{c}{power} \\\\\n", "& RGL & DS & RGL & DS \\\\\n")
## print(xtable(sum.tab, 
##              caption = 'Simulation for clustered signed rank test, comparsion between RGL and DS', digits = 3), 
##       caption.placement = 'top',  add.to.row = addtorow,
##       include.colnames = FALSE,
##       sanitize.rownames.function = function(x){x}, 
##       booktabs = TRUE)   
@ 

The standard error of the empirical power can be estimated as $0.5 /
\sqrt{1000} = 0.032$, therefore we state that there is a significant
difference between the empirical power of the two methods at a
significance level $0.05$ if the absolute difference is more than
$0.008 * 1.96 * \sqrt{2} = 0.022.$ In all of the cases listed in the
above table, these two methods are comparable. For the empirical size,
the standard error can be estimated as $\sqrt{0.05 * 0.95} /
\sqrt{1000} = 0.012$, therefore we state that there is a significant
deviation from the norminal level $0.05$ if the deviation of the
empirical size from $0.05$ is more than $0.003 * 1.96 = 0.028$,
according to which the RGL method underestimate the size in all of the
cases where the intra-cluster correlation is low on average, though
the DS method also tends to have a lower empirical size when
intra-cluster correlation is low, it does maintain an empirical size
close to the nominal level in almost all of the cases. 

\end{document}
